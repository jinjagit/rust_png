// For reading and opening files
use std::path::Path;
use std::fs::File;
use std::io::BufWriter;

fn main() {
    let path = Path::new(r"../image.png");
    let file = File::create(path).unwrap();
    let ref mut w = BufWriter::new(file);

    let mut encoder = png::Encoder::new(w, 1024, 1024); // Width is 2 pixels and height is 1.
    encoder.set_color(png::ColorType::Rgba);
    encoder.set_depth(png::BitDepth::Eight);
    encoder.set_trns(vec!(0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8));
    encoder.set_source_gamma(png::ScaledFloat::from_scaled(45455)); // 1.0 / 2.2, scaled by 100000
    encoder.set_source_gamma(png::ScaledFloat::new(1.0 / 2.2));     // 1.0 / 2.2, unscaled, but rounded
    let source_chromaticities = png::SourceChromaticities::new(     // Using unscaled instantiation here
        (0.31270, 0.32900),
        (0.64000, 0.33000),
        (0.30000, 0.60000),
        (0.15000, 0.06000)
    );
    encoder.set_source_chromaticities(source_chromaticities);
    let mut writer = encoder.write_header().unwrap();

    let mut data: [u8; 1048576] = [0; 1048576]; // An array containing a RGBA sequence.
    
    for i in 0..1048575 {
        if i <= 524287 && i % 4 == 0 {
            data[i] = 255 as u8;
        } else if i > 524287 && i % 4 == 1 {
            data[i] = 255 as u8;
        }

        if i % 4 == 3 {
            data[i] = 255 as u8;
        }
    }


    writer.write_image_data(&data).unwrap(); // Save
}